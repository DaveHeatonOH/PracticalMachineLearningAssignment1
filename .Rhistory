inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ci <- grep("^IL", names(training))
newTraining <- training[, c(names(training)[ci],"diagnosis")]
newTesting <- testing[, c(names(testing)[ci],"diagnosis")]
nonPCAModel <- train(diagnosis ~., data = newTraining, method = "glm")
nonPCAResult <- confusionMatrix(newTesting[,13], predict(nonPCAModel, newTesting[,-13]))
nonPCAResult$overall[1]
pcTrainingObj <- preProcess(newTraining[,-13], method = "pca", thresh = .8)
pcTrainingPreds <- predict(pcTrainingObj, newTraining[,-13])
pcTestingPreds <- predict(pcTrainingObj, newTesting[,-13])
pcTrainingPreds <- data.frame(pcTrainingPreds, training$diagnosis)
pcFit <- train(raining$diagnosis ~., data = pcTrainingPreds, method = "glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ci <- grep("^IL", names(training))
newTraining <- training[, c(names(training)[ci],"diagnosis")]
newTesting <- testing[, c(names(testing)[ci],"diagnosis")]
nonPCAModel <- train(diagnosis ~., data = newTraining, method = "glm")
nonPCAResult <- confusionMatrix(newTesting[,13], predict(nonPCAModel, newTesting[,-13]))
nonPCAResult$overall[1]
pcTrainingObj <- preProcess(newTraining[,-13], method = "pca", thresh = .8)
pcTrainingPreds <- predict(pcTrainingObj, newTraining[,-13])
pcTestingPreds <- predict(pcTrainingObj, newTesting[,-13])
pcTrainingPreds <- data.frame(pcTrainingPreds, training$diagnosis)
pcTrainingPreds <- data.frame(pcTrainingPreds, training$diagnosis)
pcFit <- train(training$diagnosis ~., data = pcTrainingPreds, method = "glm")
PCFit <- train(training.diagnosis ~.,data= trainPC, method="glm")
pcFit <- train(training.diagnosis ~., data = pcTrainingPreds, method = "glm")
View(pcFit)
View(trainPC)
pcTrainingPreds <- data.frame(pcTrainingPreds, training$diagnosis)
pcFit <- train(training.diagnosis ~., data = pcTrainingPreds, method = "glm")
testPredict <- predict(pcFit, pcTestingPreds)
pcFit <- train(training.diagnosis ~., data = pcTrainingPreds, method = "glm")
testPredict <- predict(pcFit, pcTestingPreds)
PCTestPredict <- predict(PCFit, testPC)
confusionMatrix(New_testing$testing.diagnosis, PCTestPredict)
newTraining <- training[, c(names(training)[ci],"diagnosis")]
newTraining <- training[, c(grep("^IL", names(training),1)]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
newTraining <- training[, c(grep("^IL", names(training),1)]
newTesting <- testing[, c(grep("^IL", names(training),1)]
training[, c(grep("^IL", names(training),1)]
newTraining <- training[, c(grep("^IL", names(training)),1)]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
newTraining <- training[, c(grep("^IL", names(training)),1)]
newTesting <- testing[, c(grep("^IL", names(training)),1)]
# Non PCA
t1 <- train(diagnosis ~., data = newTraining, method = "glm")
p1 <- predict(t1, newTesting[,-13])
t1a <- train(newTesting$diagnosis ~. ,data = p1, method = "lm")
t1a <- train(newTesting$diagnosis ~. ,data = p1, method = "glm")
PCFit <- train(training.diagnosis ~.,
data = New_training,
method ="glm",
preProc = "pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
New_training <- training[, c(grep("^IL", names(training)),1)]
newTesting <- testing[, c(grep("^IL", names(training)),1)]
PCFit <- train(training.diagnosis ~.,
data = New_training,
method ="glm",
preProc = "pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
PCFit <- train(diagnosis ~.,
data = New_training,
method ="glm",
preProc = "pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
confusionMatrix(PCFit)
library(AppliedPredictiveModeling)
library(caret)
install.packages("ElemStatLearn")
library(ElemStatLearn)
install.packages("pgmm")
library(pgmm)
library(rpart)
install.packages("gbm")
library(gbm)
library(lubridate)
install.packages("forecast")
library(lubridate)
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
rfTrain <- train(y = vowel.train$y, x = vowel.train, method = "rf")
rfTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "rf")
gbmTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "gbm")
rfTrain$finalModel
rfTrain$method
rfTrain$modelInfo
rfTrain$pred
rfTrain$call
rfTrain$dots
rfTrain$metric
rfTrain$control
rfTrain$perfNames
rfTrain$yLimits
rfTrain$levels
rfTrain$finalModel
rfTrain$finalModel[1]
rfTrain$finalModel[2]
rfTrain$finalModel[3]
rfTrain$finalModel[4]
rfTrain$finalModel[5]
rfTrain$finalModel[6]
rfTrain$finalModel[7]
rfTrain$finalModel[8]
rfTrain$finalModel[9]
rfTrain$finalModel[10]
rfTrain$finalModel[11]
rfTrain$finalModel[12]
rfTrain$finalModel[13]
rfTrain$finalModel
rfPredict <- predict(rfTrain, newdata = vowel.test[,-1])
confusionMatrix(rfPredict, vowel.test$y)
gmbPredict <- predict(gbmTrain, vowel.test[,-1])
confusionMatrix(gmbPredict, vowel.test$y)
multiPred <- data.frame(rfPredict, gmbPredict, vowel.test$y)
combModFit <- train(y = multiPred$vowel.test.y, x = multiPred, method = "gam")
combPred <- predict(combModFit, multiPred)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rfTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "rf")
gbmTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "gbm")
rfPredict <- predict(rfTrain, newdata = vowel.test[,-1])
confusionMatrix(rfPredict, vowel.test$y)
gmbPredict <- predict(gbmTrain, vowel.test[,-1])
confusionMatrix(gmbPredict, vowel.test$y)
multiPred <- data.frame(rfPredict, gmbPredict, y = vowel.test$y)
combModFit <- train(y = multiPred$y, x = multiPred, method = "gam")
combPred <- predict(combModFit, multiPred)
confusionMatrix(rfPredict, vowel.test$y)
confusionMatrix(gmbPredict, vowel.test$y)
multiPred <- data.frame(rfPredict, gmbPredict, y = vowel.test$y)
View(multiPred)
combModFit <- train(y = multiPred$y, x = multiPred[,-1], method = "gam")
combModFit <- train(multiPred$y,data = multiPred, method = "gam")
combModFit <- train(multiPred$y ~ ., method = "gam", data = multiPred)
combModFit <- train(y = multiPred$y, method = "gam", x = multiPred[,-3])
View(multiPred)
multiPred[,-3]
multiPred <- data.frame(rfPredict, gmbPredict, y = vowel.test$y)
sum(rfPredict[multiPred$rfPredict == multiPred$gmbPredict] ==
multiPred$y[multiPred$rfPredict == multiPred$gmbPredict]) /
sum(multiPred$rfPredict == multiPred$gmbPredict)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rfTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "rf")
gbmTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "gbm")
rfPredict <- predict(rfTrain, newdata = vowel.test[,-1])
gmbPredict <- predict(gbmTrain, vowel.test[,-1])
multiPred <- data.frame(rfPredict, gmbPredict, y = vowel.test$y)
confusionMatrix(rfPredict, vowel.test$y)$overall[1]
confusionMatrix(gmbPredict, vowel.test$y)$overall[1]
sum(rfPredict[multiPred$rfPredict == multiPred$gmbPredict] ==
multiPred$y[multiPred$rfPredict == multiPred$gmbPredict]) /
sum(multiPred$rfPredict == multiPred$gmbPredict)
rfTrain <- train(vowel.train$y ~ ., method = "rf", data = vowel.train)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
#rfTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "rf")
#gbmTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "gbm")
rfTrain <- train(vowel.train$y ~ ., method = "rf", data = vowel.train)
gbmTrain <- train(vowel.train$y ~ ., method = "gbm", data = vowel.train)
rfPredict <- predict(rfTrain, newdata = vowel.test[,-1])
gmbPredict <- predict(gbmTrain, vowel.test[,-1])
multiPred <- data.frame(rfPredict, gmbPredict, y = vowel.test$y)
confusionMatrix(rfPredict, vowel.test$y)$overall[1]
confusionMatrix(gmbPredict, vowel.test$y)$overall[1]
sum(rfPredict[multiPred$rfPredict == multiPred$gmbPredict] ==
multiPred$y[multiPred$rfPredict == multiPred$gmbPredict]) /
sum(multiPred$rfPredict == multiPred$gmbPredict)
rfTrain <- train(vowel.train$y ~ ., method = "rf", data = vowel.train[,-1])
rfTrain <- train(vowel.train$y ~ ., data = vowel.train, method = "rf")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rfTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "rf")
gbmTrain <- train(y = vowel.train$y, x = vowel.train[,-1], method = "gbm")
rfPredict <- predict(rfTrain, newdata = vowel.test)
gmbPredict <- predict(gbmTrain, vowel.test)
multiPred <- data.frame(rfPredict, gmbPredict, y = vowel.test$y)
confusionMatrix(rfPredict, vowel.test$y)$overall[1]
confusionMatrix(gmbPredict, vowel.test$y)$overall[1]
sum(rfPredict[multiPred$rfPredict == multiPred$gmbPredict] ==
multiPred$y[multiPred$rfPredict == multiPred$gmbPredict]) /
sum(multiPred$rfPredict == multiPred$gmbPredict)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfTrain <- train(y = diagnosis, x = training, method = "rf")
gbmTrain <- train(y = diagnosis, x = training, method = "gbm")
ldaTrain <- train(y = diagnosis, x = training, method = "lda")
predRf <- predict(rfTrain, newdata = testing)
predGBM <- predict(gbmTrain, newdata = testing)
predLDA <- predict(ldaTrain, newdata = testing)
newMod <- data.frame(predRf, predGBM, predLDA, diagnosis = testing$diagnosis)
combModFit <- train(y = diagnosis, x = newMod, method = "rf")
combPred <- predict(combModFit, newMod)
confusionMatrix(predRf, testing$diagnosis)$overall[1]
confusionMatrix(predGBM, testing$diagnosis)$overall[1]
confusionMatrix(predLDA, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfTrain <- train(y = training$diagnosis, x = training, method = "rf")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfTrain <- train(y = training$diagnosis, x = training, method = "rf")
gbmTrain <- train(y = training$diagnosis, x = training, method = "gbm", verbose = F)
ldaTrain <- train(y = training$diagnosis, x = training, method = "lda")
predRf <- predict(rfTrain, newdata = testing)
predGBM <- predict(gbmTrain, newdata = testing)
predLDA <- predict(ldaTrain, newdata = testing)
newMod <- data.frame(predRf, predGBM, predLDA, diagnosis = testing$diagnosis)
combModFit <- train(y = diagnosis, x = newMod, method = "rf")
combPred <- predict(combModFit, newMod)
confusionMatrix(predRf, testing$diagnosis)$overall[1]
confusionMatrix(predGBM, testing$diagnosis)$overall[1]
confusionMatrix(predLDA, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
ldaTrain <- train(y = training$diagnosis, x = training, method = "lda")
ldaTrain <- train(y = training$diagnosis, x = training, method = "lda")
View(training)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfTrain <- train(y = training$diagnosis, x = training[,-1], method = "rf")
gbmTrain <- train(y = training$diagnosis, x = training[,-1], method = "gbm", verbose = F)
ldaTrain <- train(y = training$diagnosis, x = training[,-1], method = "lda")
predRf <- predict(rfTrain, newdata = testing)
predGBM <- predict(gbmTrain, newdata = testing)
predLDA <- predict(ldaTrain, newdata = testing)
newMod <- data.frame(predRf, predGBM, predLDA, diagnosis = testing$diagnosis)
combModFit <- train(y = diagnosis, x = newMod, method = "rf")
combPred <- predict(combModFit, newMod)
confusionMatrix(predRf, testing$diagnosis)$overall[1]
confusionMatrix(predGBM, testing$diagnosis)$overall[1]
confusionMatrix(predLDA, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
library(MASS)
ldaTrain <- train(y = training$diagnosis, x = training[,-1], method = "lda")
ldaTrain <- train(y = training$diagnosis, x = training[,-1], method = "lda", parallel = F)
ldaTrain <- train(y = training$diagnosis, x = training[,-1], method = "lda", parallel = T)
ldaTrain <- train(y = training$diagnosis, x = training[,-1], method = "lda", allowParallel = T)
ldaTrain <- train(y = training$diagnosis, x = training[,-1], method = "lda", allowParallel = F)
ldaTrain <- train(y = factor(training$diagnosis), x = training[,-1], method = "lda")
View(training)
is.na(training$diagnosis)
sum(is.na(training$diagnosis))
ldaTrain <- train(y = as.factor(training$diagnosis), x = training[,-1], method = "lda")
ldaTrain <- train(y = as.factor(training$diagnosis), x = training[,-1], method = "lda")
training[,-1]
ldaTrain <- train(y = training$diagnosis, x = training[,-1], method = "lda", allowParallel = FALSE)
ldaTrain <- train(training$diagnosis ~., method = "lda", data = training)
ldaTrain <- train(training$diagnosis ~., method = "lda", data = training[,-1])
predRf <- predict(rfTrain, newdata = testing)
predGBM <- predict(gbmTrain, newdata = testing)
confusionMatrix(predRf, testing$diagnosis)$overall[1]
confusionMatrix(predGBM, testing$diagnosis)$overall[1]
ldaTrain <- train(training$diagnosis ~., method = "lda", data = training[,-1])
ldaTrain <- train(y = training$diagnosis, x = training[,-1], method = "lda")
names(formals(lda))
names(formals(rf))
names(formals(gbm))
ldaTrain <- train(y = training$diagnosis, x = training[,-1], method = "lda", trainControl(allowParallel = FALSE))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
train(y = training$CompressiveStrength, x = training, method = "lasso")
lassTrain <- train(y = training$CompressiveStrength, x = training, method = "lasso")
predict(lassTrain, testing)
lassPred <- predict(lassTrain, testing)
>plot.enet
?plot.enet
plot(lassPred)
plot(lassTrain$finalModel)
plot(lassTrain$finalModel, xvar = "penalty")
lassTrain <- train(y = training$CompressiveStrength, x = training[,-9], method = "lasso")
plot(lassTrain$finalModel, xvar = "penalty")
plot(lassTrain$finalModel, xvar = "penalty", use.color = T)
data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
head(data)
library(lubridate) # For year() function below
dat <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
?bats
bats(tstrain)
mod_ts <- bats(tstrain)
fcast <- forecast(mod_ts, level = .95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?svm
e1071::svm(CompressiveStrength ~ ., data = training)
svmTrain <- svm(CompressiveStrength ~ ., data = training)
svmPred <- predict(svmTrain, newdata = testing)
svmPred
svmPred$RMSE
accuracy(svmPred, testing$CompressiveStrength
accuracy(svmPred, testing$CompressiveStrength
)
accuracy(svmPred, testing$CompressiveStrength)
install.packages(c("forcats", "geometry", "haven", "maptools", "modelr", "xfun"))
setwd("C:/Users/dave_/OneDrive/GitHub/Coursera/Practical Machine Learning/PracticalMachineLearningAssignment1")
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
# Create a matrix ready to take input of for loop
combo <- rbind(training[,-160], testing[,-160])
rows <- ncol(combo)
output <- matrix(ncol=2,nrow = rows)
# Loop through the columns to find the columns with >0 NA rows
for (i in 1:ncol(combo)) {
j <- sum(is.na(combo[,i]))
if (sum(is.na(combo[,i]))) {
output[i,] <- c(i,j)
} else {
output[i,] <- c(0,0)
}
output <- as.data.frame(output)
}
nrow(output[output$V1 >0,])
# Show a summary of the missing data for columsn with at least 1 NA
summary(output[output$V1 >0,]$V2)[3]
training <- training[,-output$V1]
testing <- testing[,-output$V1]
training <- training[,-c(1:6)]
testing <- testing[,-c(1:6)]
library(randomForest)
library(caret)
# Set the seed for reproducible resulta
set.seed(26598)
# Create partition and split traind and test 70 - 30 percent
inTrain <- createDataPartition(training$classe, p = 0.7, list = FALSE)
train1 <- training[inTrain,]
test1 <- training[-inTrain,]
set.seed(546886)
rfFit1 <- randomForest(classe ~ num_window + roll_belt + pitch_forearm +
magnet_dumbbell_z + pitch_belt + magnet_dumbbell_y +
roll_forearm + magnet_dumbbell_x + accel_dumbbell_y,
data = train1,
importance = TRUE)
rfFit1
preds <- predict(rfFit1, test1[,-54])
confusionMatrix(preds, test1$classe)
# Create multi folds for cross val
cv10Folds <- createMultiFolds(train1$classe, k = 3, times = 10)
# Create Train COntrol
ctrl1 <- trainControl(method = "repeatedcv", number = 3, repeats = 10,
index = cv10Folds)
library(doSNOW)
cl <- makeCluster(2, type = "SOCK")
registerDoSNOW(cl)
rfCV1 <- train(x = train1[,-54], train1$classe, method = "rf", tuneLength = 3,
ntree = 1000, trControl = ctrl1)
stopCluster(cl)
rfCV1
predict(rfCV1, test1[,-54])
finalPred <- predict(rfCV1, test1[,-54])
confusionMatrix(finalPred, test1$classe)
rfCV1
rfCV1
rfCV1$bestTune
